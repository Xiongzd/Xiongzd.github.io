<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pytorch_2</title>
      <link href="2021/02/18/pytorch-2/"/>
      <url>2021/02/18/pytorch-2/</url>
      
        <content type="html"><![CDATA[<h1 id="2-预训练网络"><a href="#2-预训练网络" class="headerlink" title="2 预训练网络"></a>2 预训练网络</h1><p>本章将介绍</p><ul><li>运行预先训练好的图像识别模型</li><li>GANs 和 CycleGAN 的模型介绍</li><li>可生成图像文字描述的字幕模型</li><li>通过 Torch Hub 共享模型</li></ul><hr><h2 id="2-1-一种用来识别图像主体的预训练网络"><a href="#2-1-一种用来识别图像主体的预训练网络" class="headerlink" title="2.1 一种用来识别图像主体的预训练网络"></a>2.1 一种用来识别图像主体的预训练网络</h2><p>我们将在这里讨论的预训练网络是在ImageNet数据集的一个子集上训练的(<a href="http://imagenet.stanford.edu).imagenet是一个非常大的数据集,由斯坦福大学维护超过1400万张图像.所有图像都使用来自wordnet数据集(http//wordnet.princeton.edu)%E7%9A%84%E5%90%8D%E8%AF%8D%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E8%BF%9B%E8%A1%8C%E6%A0%87%E8%AE%B0%EF%BC%8CWordNet%E6%95%B0%E6%8D%AE%E9%9B%86%E5%8F%88%E6%98%AF%E8%8B%B1%E8%AF%AD%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%B8%AA%E5%A4%A7%E5%9E%8B%E8%AF%8D%E6%B1%87%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%82">http://imagenet.stanford.edu)。ImageNet是一个非常大的数据集，由斯坦福大学维护超过1400万张图像。所有图像都使用来自WordNet数据集(http://wordnet.princeton.edu)的名词层次结构进行标记，WordNet数据集又是英语语言的一个大型词汇数据库。</a></p><h3 id="2-1-1-获取用于图像识别的预训练网络"><a href="#2-1-1-获取用于图像识别的预训练网络" class="headerlink" title="2.1.1 获取用于图像识别的预训练网络"></a>2.1.1 获取用于图像识别的预训练网络</h3><p>如前所述，我们现在将使用在ImageNet上训练过的网络来武装自己。我们可以参考TorchVision项目(<a href="https://github.com/pytorch/vision),%E5%AE%83%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A1%A8%E7%8E%B0%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84,%E5%A6%82AlexNet">https://github.com/pytorch/vision),它包含的一些表现最好的计算机视觉神经网络架构,如AlexNet</a> (<a href="http://mng.bz/lo6z">http://mng.bz/lo6z</a>), ResNet (<a href="https://arxiv.org/pdf/">https://arxiv.org/pdf/</a> 1512.03385.pdf),和Inception v3 (<a href="https://arxiv.org/pdf/1512.00567.pdf)%E3%80%82%E5%AE%83%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%96%B9%E4%BE%BF%E5%9C%B0%E8%AE%BF%E9%97%AEImageNet%E7%AD%89%E6%95%B0%E6%8D%AE%E9%9B%86%E5%92%8C%E5%85%B6%E4%BB%96%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E4%BB%A5%E5%8A%A0%E5%BF%ABPyTorch%E4%B8%AD%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%80%9F%E5%BA%A6%E3%80%82%E6%88%91%E4%BB%AC%E5%B0%86%E5%9C%A8%E4%B9%A6%E4%B8%AD%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%8E%A2%E8%AE%A8%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E3%80%82%E7%8E%B0%E5%9C%A8%EF%BC%8C%E8%AE%A9%E6%88%91%E4%BB%AC%E5%8A%A0%E8%BD%BD%E5%B9%B6%E8%BF%90%E8%A1%8C%E4%B8%A4%E4%B8%AA%E7%BD%91%E7%BB%9C:%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%98%AFAlexNet%EF%BC%8C%E6%97%A9%E6%9C%9F%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E7%AA%81%E7%A0%B4%E6%80%A7%E7%BD%91%E7%BB%9C%E4%B9%8B%E4%B8%80;%E7%84%B6%E5%90%8E%E5%88%A9%E7%94%A8%E6%AE%8B%E5%B7%AE%E7%BD%91%E7%BB%9C(%E7%AE%80%E7%A7%B0ResNet)%E5%AF%B9ImageNet%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB%E3%80%81%E6%A3%80%E6%B5%8B%E5%92%8C%E5%AE%9A%E4%BD%8D%E7%AD%89%E3%80%82">https://arxiv.org/pdf/1512.00567.pdf)。它还可以方便地访问ImageNet等数据集和其他实用程序，以加快PyTorch中的计算机视觉应用程序的速度。我们将在书中进一步探讨这些问题。现在，让我们加载并运行两个网络:第一个是AlexNet，早期的图像识别突破性网络之一;然后利用残差网络(简称ResNet)对ImageNet进行分类、检测和定位等。</a><br>预定义的模型可以在<code>torchvision.models</code>中找到</p><p><code>&gt;&gt;&gt; from torchvision import models</code></p><p>我们可以看看实际的模型：</p><p><code>&gt;&gt;&gt; dir(models)</code></p><p><code>['AlexNet', 'DenseNet', 'GoogLeNet', 'Inception3', 'MNASNet', 'MobileNetV2', 'ResNet', 'ShuffleNetV2', 'SqueezeNet', 'VGG', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '_utils', 'alexnet', 'densenet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'detection', 'googlenet', 'inception', 'inception_v3', 'mnasnet', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet', 'mobilenet_v2', 'resnet', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'segmentation', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'shufflenetv2', 'squeezenet', 'squeezenet1_0', 'squeezenet1_1', 'utils', 'vgg', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'video', 'wide_resnet101_2', 'wide_resnet50_2']</code></p><p>大写的名称指的是实现的许多六星模型的Python类，他们的结构体系不同——也就是说，在输入和输出之间发生的操作的安排不同。小写的名称是函数，他返回从这类实例化的模型，有时带有不同的参数集，例如resnet101返回一个有101层的ResNet实例，resnet18有18层，以此类推。现在让我们来看看AlexNet</p><h3 id="2-1-2-AlexNet"><a href="#2-1-2-AlexNet" class="headerlink" title="2.1.2 AlexNet"></a>2.1.2 AlexNet</h3><p>为了在输入映像上运行AlexNet结构，我们可以创建AlexNet类的一个实例：</p><p><code>&gt;&gt;&gt; alexnet = models.AlexNet()</code></p>]]></content>
      
      
      <categories>
          
          <category> PyTorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
            <tag> PyTorch </tag>
            
            <tag> Tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雾环状流动的参数计算</title>
      <link href="2021/01/31/fog-circulation/"/>
      <url>2021/01/31/fog-circulation/</url>
      
        <content type="html"><![CDATA[<h2 id="雾环状流动的参数计算"><a href="#雾环状流动的参数计算" class="headerlink" title="雾环状流动的参数计算"></a>雾环状流动的参数计算</h2><h4 id="1-使用分相流模型估算摩阻梯度"><a href="#1-使用分相流模型估算摩阻梯度" class="headerlink" title="1.使用分相流模型估算摩阻梯度"></a>1.使用分相流模型估算摩阻梯度</h4><p>$先计算气相和液相的折算流速W’’和W’，并根据此求出雷诺数$<br>$$<br>    j_ { g } =\frac { M’’ }  { A\rho’’ }  = \frac { 0.1 }  { 1.64\times\pi\times0.03^ { 2 } /4 }  = 86.31 m/s<br>$$</p><p>$$<br>j_ { f }  = \frac { M’ }  { A\rho’ }  = \frac { 0.2 }  { 1000\times\pi\times 0.03^ { 2 } /4  }  = 0.1415 m/s<br>$$ </p><p>$$<br>Re_ { f } =\frac { j_ { f } \rho’ D }  { \mu’ } =\frac { 0.1415\times1000\times0.03 }  { 1\times10^ { -3 }  }  = 422449<br>$$</p><p>$$<br>Re_ { g }  = \frac { j_ { g } \rho’’D }  { \mu’’ } =\frac { 86.31\times1.64\times0.03 }  { 1.8\times10^ { -5 }  } =235914<br>$$</p><p>$可以看出两相均为湍流。再按布拉修斯公式计算出摩阻系数\lambda_ { l } 和\lambda_ { g } 。$</p><p>$$<br>\lambda_ { f } =0.3164Re_ { f } ^ { -0.25 }  = 0.3164\times42449^ { -0.25 } =0.022<br>$$</p><p>$$<br>\lambda_ { g }  = 0.3164Re_ { g } ^ { -0.25 }  = 0.3164\times235914=0.0109<br>$$</p><p>$再计算出分液相及分气相的摩阻梯度(\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } )_ { l } 和(\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } )_ { g } $</p><p>$$<br>(\frac { \mathrm { d } p_ { g }  }  { \mathrm { d } z } )_ { g } =\frac { \lambda_ { g }  }  { D } \frac { G^ { 2 } x^ { 2 }  }  { 2\rho’’ } =2175 Pa/m<br>$$</p><p>$由此计算出马蒂内利参数$<br>$$    X^ { 2 } =\frac { (\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } )_ { l }  }  { (\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } )_ { g }  } =0.137<br>$$</p><p>$再由奇斯霍姆式求出气相折算系数$<br>$$    \Phi_ { g } ^ { 2 } =1+20X+X^ { 2 }  = 8.573<br>$$</p><p>$同样的计算出液相折算系数$<br>$$    \Phi_ { l } ^ { 2 }  = 1 + \frac { 20 }  { X }  + \frac { 1 }  { X^ { 2 }  }  =62.35<br>$$</p><p>$最后估算出两相压降梯度$<br>$$    \frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z }  = \Phi_ { g } ^ { 2 } (\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } )_ { g } =18646Pa/m<br>$$</p><p>$$    \frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z }  = \Phi_ { g } ^ { 2 } (\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } )_ { g } =18456Pa/m<br>$$  </p><h4 id="2-计算窜流比"><a href="#2-计算窜流比" class="headerlink" title="2. 计算窜流比"></a>2. 计算窜流比</h4><p>$首先计算出无因次量  \bar { Y } $</p><p>$$     \bar { Y } =\frac { j_ { g } \mu’’ }  { \sigma } \cdot(\frac { \rho’’ }  { \rho’ } )\times10^ { 4 } =8.74<br>$$ $再计算出窜流比值  E $ </p><p>$$    E=0.400038\times(8.7404)^ { 0.2875 } =0.6257<br>$$</p><h4 id="3-计算气流夹带水滴工况下的分液相折算系数-Phi-lE-2"><a href="#3-计算气流夹带水滴工况下的分液相折算系数-Phi-lE-2" class="headerlink" title="3. 计算气流夹带水滴工况下的分液相折算系数$\Phi_ { lE } ^ { 2 } $"></a>3. 计算气流夹带水滴工况下的分液相折算系数$\Phi_ { lE } ^ { 2 } $</h4><p>$先计算出入窜流量的雷诺数$<br>$$    Re_ { lE } =Re_ { l } (1-E)=15887<br>$$</p><p>$据此算出摩阻系数$<br>$$<br>    \lambda_ { lE } =0.3164Re_ { lE } ^ { -0.25 } =0.02818<br>$$</p><p>$计算出扣除被气流带走的水滴后的液相折算速度$<br>$$<br>    j_ { E } =\frac { M’(1-E) }  { \rho’A } =0.106m/s<br>$$ </p><p>$算出气流夹带水滴时的分液相摩阻梯度$<br>$$<br>    (\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } )_ { lE } =\frac { \lambda_ { lE }  }  { D } \frac { \rho’j_ { E } ‘^ { 2 }  }  { 2 } =5.277<br>$$</p><p>$然后计算出计入窜流量的分液相折算系数$<br>$$<br>    \Phi_ { lE } ^ { 2 } =\frac { \frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z }  }  { (\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } )_ { lE }  } =3517<br>$$</p><h4 id="4-计算雾环状流的截面含气率"><a href="#4-计算雾环状流的截面含气率" class="headerlink" title="4.计算雾环状流的截面含气率"></a>4.计算雾环状流的截面含气率</h4><p>$由下式计算出雾环状流的截面含气率$<br>$$<br>    (1-\alpha)^ { 2 }  =\frac { 1 }  { \Phi_ { l } ^ { 2 }  }<br>$$</p><p>$可以计算得到$<br>$$<br>    \alpha = 1-\frac { 1 }  { \Phi_ { l }  }  = 0.872<br>$$</p><h4 id="5-计算两相摩阻梯度"><a href="#5-计算两相摩阻梯度" class="headerlink" title="5. 计算两相摩阻梯度"></a>5. 计算两相摩阻梯度</h4><p>$先按照下式子求出  \Phi_ { g } ^ { 2 } $</p>$$\Phi_{g}^{2}=\left[\frac{1+75\left(1-\alpha\right)}{{{\alpha}^{{}^{5}/{}_{2}}}}\right]\left(\frac{{M}''+E{M}''}{{{M}''}}\right){{\left\{1-2\left(\frac{\alpha}{1-\alpha}\right)\left(\frac{{{\rho}''}}{{{\rho}'}}\right)\left[\frac{{M}'\left(1-E\right)}{{{M}''}}\right]\right\}}^{2}}=32.495$$<p>$再求得两相摩阻梯度$<br>$$<br>    \frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } =\Phi_ { g } ^ { 2 } (\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } )_ { g } =70676 Pa/m<br>$$</p><p>$对\Phi_ { g } ^ { 2 } 进行迭代计算，如图1所示，\Phi_ { g } ^ { 2 } 的值已经收敛，最终可以得到 \alpha = 0.9779,\Phi_ { g } ^ { 2 } =5.0079,\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } =10892。$</p><p>$带入公式计算$<br><img src="/2021/01/31/fog-circulation/Figure_1.svg" width="400" height="300" alt="图1.不同迭代次数下$\Phi_ { g } ^ { 2 } $的值"></p><p>$$<br>    (\frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z } )_ { g } =\frac { \frac { \mathrm { d } p_ { f }  }  { \mathrm { d } z }  }  { \Phi_ { g } ^ { 2 }  }  = 2175 Pa/m<br>$$</p><p>$通过下式计算液膜厚度\delta$<br>$$<br>    \alpha = 1 - 4\frac { \delta }  { D }<br>$$</p><p>$最终得到液膜厚度\delta$<br>$$<br>    \delta = \frac { (1-\alpha)D }  { 4 }  = 0.1658 mm<br>$$ </p><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><pre class="line-numbers language-py" data-language="py"><code class="language-py">import numpy as npimport matplotlib.pyplot as pltfrom math import *# 常量M_g = 0.1M_f = 0.2E = 0.6257rho_g = 1.64rho_f = 1000mu_g = 1.8e-5mu_f = 1e-3grad_Pg = 2175grad_PlE = 5.277# 初始值alpha = 0.872Phi_g_2 = 8.573Phi_lE_2 = 3517grad_P = 18646def Phig2(alpha , M_f, M_g, rho_f, rho_g, E):    a = ((1+75*(1-alpha))/(alpha ** (5/2)))    b = ((M_g + E * M_f)/M_g)    c = (1-2*(alpha/(1-alpha))*(rho_g/rho_f)*(M_f*(1-E)/M_g))**2    return a * b * cdef gradPf(Phi_g_2, grad_Pg):    return Phi_g_2 * grad_Pgif __name__ == '__main__':    ans = []    for k in range(1000):        Phi_g_2 = Phig2(alpha, M_f, M_g, rho_f, rho_g, E)        grad_P_new =  gradPf(Phi_g_2, grad_Pg)        if (fabs(grad_P_new - grad_P)&lt; 1e-8):            break        grad_P = grad_P_new        Phi_lE_2 = grad_P_new / grad_PlE        alpha = 1 - 1 / sqrt(Phi_lE_2)        ans.append(Phi_g_2)plt.plot(np.linspace(0,len(ans),len(ans)),ans)plt.scatter(np.linspace(0,len(ans),len(ans)),ans)plt.show()print(Phi_g_2)print(alpha)print(grad_P_new)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 两相流与传热 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 两相流与传热 </tag>
            
            <tag> 大学课程 </tag>
            
            <tag> 雾环状流动 </tag>
            
            <tag> 摩阻分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/30/hello-world/"/>
      <url>2021/01/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>公告</title>
      <link href="2021/01/30/gong-gao/"/>
      <url>2021/01/30/gong-gao/</url>
      
        <content type="html"><![CDATA[<h4 id="请美丽可爱又善良的单身小姐姐务必加我好友，谢谢合作"><a href="#请美丽可爱又善良的单身小姐姐务必加我好友，谢谢合作" class="headerlink" title="请美丽可爱又善良的单身小姐姐务必加我好友，谢谢合作"></a><span style="color:#FF00FF;background:背景颜色;font-size:文字大小;font-family:;">请美丽可爱又善良的单身小姐姐务必加我好友，谢谢合作</span></h4><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>2021.1.30 使用cdn加速首页图片加载</p><p>2021.1.31 增加公告栏</p><p><span style="color:#FF3030;background:背景颜色;font-size:文字大小;font-family:;">2021.1.31 开放评论系统，请大家多多留言</span></p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
